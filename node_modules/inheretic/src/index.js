module.exports = (parent, packageName = 'package.json') => {
    const fs = require('fs');
    const path = require('path');
    function debug(msg) {
        //console.log(msg());
    }
    function findPackages(folder, packages = []){
        const files = fs.readdirSync(folder);
        files.forEach((file) => {
            try {
                const resolved = path.join(folder, file);
                const stats = fs.lstatSync(resolved);
                if(stats.isDirectory()){
                    findPackages(resolved, packages);
                } 
                if (file.toLowerCase().endsWith(packageName)) {
                    packages.push(resolved);
                }
            } catch (x) {} // ignore - lstat errors for missing files everywhere
        });
        return packages;
    };
    parent = path.join(__dirname + '/../', parent);
    const packages = findPackages(parent);
    // TODO get this out of here
    if(!Array.prototype.flatMap){
        Array.prototype.flatMap = function(lambda) { 
            return Array.prototype.concat.apply([], this.map(lambda)); 
        };
    }
    const families = packages.flatMap((package) => {
        const parsed = JSON.parse(fs.readFileSync(package));
        parsed._filename = package;
        if(parsed.parent){
            const parent = path.resolve(path.dirname(package), parsed.parent);
            if(fs.existsSync(parent)){
                const json = JSON.parse(fs.readFileSync(parent));
                json._filename = parent;
                return[{
                    child: parsed, 
                    parent: json, 
                    toString: function(){return this.child.toString() + ":\n" + this.parent.toString() + "\n";}
                }];
            }
        } 
        return [];
    });
    families.forEach((family) => {
        debug(() => { return `inhereting: ${family.parent._filename} -> ${family.child._filename}`;});
        debug(() => { return `was: ${JSON.stringify(family.child, null, 4)}`;});
        Object.keys(family.parent).forEach((key) => {
            const childValue = family.child[key];
            if(!childValue){
                family.child[key] = family.parent[key];
            }
        });
        debug(() => { return `isnow: ${JSON.stringify(family.child, null, 4)}`;});
        const _filename = family.child._filename;
        delete family.child._filename;
        fs.writeFileSync(_filename, JSON.stringify(family.child, null, 4));
    });
};