module.exports = (parent, packageName = 'package.json') => {
    const fs = require('fs');
    const path = require('path');
    const _ = require('lodash');
    function debug(msg) {
        console.log(msg());
    }
    function findPackages(folder, packages = []){
        const files = fs.readdirSync(folder);
        files.forEach((file) => {
            try {
                const resolved = path.join(folder, file);
                const stats = fs.lstatSync(resolved);
                if(stats.isDirectory()){
                    findPackages(resolved, packages);
                } 
                if (file.toLowerCase().endsWith(packageName)) {
                    packages.push(resolved);
                }
            } catch (x) {} // ignore - lstat errors for missing files everywhere
        });
        return packages;
    };
    parent = path.join(__dirname + '/../', parent);
    const packages = findPackages(parent);
    const families = _.flatMap(packages, (package) => {
        const parsed = JSON.parse(fs.readFileSync(package));
        parsed._filename = package;
        if(parsed.parent){
            const parent = path.resolve(path.dirname(package), parsed.parent);
            if(fs.existsSync(parent)){
                const json = JSON.parse(fs.readFileSync(parent));
                json._filename = parent;
                return[{
                    child: parsed, 
                    parent: json, 
                    toString: function(){return this.child.toString() + ":\n" + this.parent.toString() + "\n";}
                }];
            }
        } 
        return [];
    }).reduce((obj, family) => {
        obj[family.child._filename] = family;
        return obj;
    }, {});
    function merge(parent, child, [key, ...tail] = Object.keys(parent)){
        if(!key && tail.length === 0) return;
        const childValue = child[key];
        const parentValue = parent[key];
        if(!childValue){
            child[key] = parentValue;
        } 
        else if ((typeof childValue === "string" && 
                    typeof parentValue === "string") ||
                  (childValue === parentValue)) {
            // these are overridden in child
        } else if(parent.forEach && child.find && child.push) {
            parent.forEach((pv) => {
                if(!child.find((cv) => cv === pv)){
                    child.push(cv);
                }
            });
        } else if(parentValue) {
            merge(parentValue, childValue);
        }
        merge(parent, child, tail);
    }
    function inherit(parent, child){
        if(!child._generated){
            merge(parent, child);
            const _filename = child._filename;
            delete child._filename;
            delete child._generated;
            const fileName = _filename.replace(packageName, "package.json");
            fs.writeFileSync(fileName, JSON.stringify(child, null, 4));
            child._generated = true;
        } 
    }
    function chainInherit([key, ...tail] = Object.keys(families)){
        if(!key && tail.length === 0) return;
        const family = families[key];
        const parentFamily = families[family.parent._filename];
        if(parentFamily){
            const index = tail.indexOf(family.parent._filename);
            if(index > -1){
                tail.splice(index, 1);
            }
            chainInherit([family.parent._filename]);
            inherit(parentFamily.child, family.parent);
        }
        inherit(family.parent, family.child);
        chainInherit(tail);
    }
    chainInherit();
};