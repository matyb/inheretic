const fs = require('fs');
const path = require('path');
const _ = require('lodash');
const diveIntoTypes = ['object', 'function'];
function findPackages(folder, packageName, packages = []){
    const files = fs.readdirSync(folder);
    files.forEach((file) => {
        const resolved = path.join(folder, file);
        const stats = fs.lstatSync(resolved);
        if(stats.isDirectory()){
            module.exports.findPackages(resolved, packageName, packages);
        } 
        if (path.basename(file) === packageName) {
            packages.push(resolved);
        }
    });
    return packages;
}
function merge(parent, child, [key, ...tail] = Object.keys(parent)){
    if(!key && tail.length === 0) return;
    const childValue = child[key];
    const parentValue = parent[key];
    const supportedType = (bool, val) => 
        _.some(diveIntoTypes, 
               (type) => bool && type === typeof val);
    if(!childValue){
        child[key] = parentValue;
    } else if(_.isArray(parent) && _.isArray(child)) {
        parent.forEach((pv) => {
            if(!child.find((cv) => cv === pv)){
                child.push(pv);
            }
        });
    } else if (parentValue &&
               childValue !== parentValue &&
               [parentValue, childValue].reduce(supportedType)) {
        merge(parentValue, childValue);
    }
    merge(parent, child, tail);
}
function inherit(parent, child, writer = fs.writeFileSync){
    if(!child._generated){
        module.exports.merge(parent, child);
        const _filename = child._filename;
        delete child._filename;
        delete child._generated;
        const fileName = path.join(path.dirname(_filename), "package.json");
        writer(fileName, JSON.stringify(child, null, 4));
        child._generated = true;
        console.log(`Wrote: '${fileName}' successfully.`);
    } 
}
function chainInherit(families, writer, [key, ...tail] = Object.keys(families)){
    const family = families[key];
    if(family){
        const parentFamily = families[family.parent._filename];
        if(parentFamily){
            const index = tail.indexOf(parentFamily._filename);
            if(index > -1){
                (function swap(array, x, y){ // todo array.prototype, lib?
                    let tmp = array[x];
                    array[x] = array[y];
                    array[y] = tmp;
                }(tail, index, 0));
            }
            module.exports.chainInherit(families, writer, tail);
            family.parent = parentFamily.child;
            tail.splice(0, 1);
        }
        module.exports.inherit(family.parent, family.child, writer);
        module.exports.chainInherit(families, writer, tail);
    }
}
function packageToFamily(fileSystem = fs) {
    return (package) => {
        const parsed = JSON.parse(fileSystem.readFileSync(path.resolve(package)));
        parsed._filename = package;
        if(parsed.parent){
            const parent = path.resolve(path.dirname(package), parsed.parent);
            if(fileSystem.existsSync(parent)){
                const json = JSON.parse(fileSystem.readFileSync(parent));
                json._filename = parent;
                return[{child: parsed, parent: json}];
            } else {
                console.warn(`Unable to locate parent at path: '${parent}'`);
            }
        }
        return [];
    };
}
function inheretic(parent, writer, packageName = 'package.json'){
    parent = path.join(process.cwd + '/../', parent);
    console.log(`Seeking within: ${parent}`);
    const families = _.flatMap(module.exports.findPackages(parent, packageName), 
                            module.exports.packageToFamily())
                    .reduce((obj, family) => {
                        obj[family.child._filename] = family;
                        return obj;
                    }, {});
    module.exports.chainInherit(families, writer);
}
module.exports = inheretic; 
module.exports.findPackages = findPackages;
module.exports.merge = merge;
module.exports.inherit = inherit;
module.exports.chainInherit = chainInherit;
module.exports.packageToFamily = packageToFamily;