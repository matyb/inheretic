describe('inherit', () => {
  const cleanupTmp = true;
  const startTime = new Date();
  const fs = require('fs');
  let noParentJson;
  
  function readModuleFile(fileName){
    return (moduleName) => {
      const path = `./tmp/packages/node_modules/${moduleName}/${fileName}`;
      if(fs.existsSync(path)){
        return fs.readFileSync(path, { encoding: 'utf8' });
      }
    };
  }

  const readPackage = readModuleFile('package.json');
  const readTemplate = readModuleFile('template.package.json');

  function time(label, lambda, start = new Date()){
    try{
      const obj = lambda();
      console.log(`'${label}' took: ${(new Date().getTime() - start.getTime()) / 1000}s.`);
      return obj;
    } catch (x) {
      console.log(`'${label}' died in: ${(new Date().getTime() - start.getTime()) / 1000}s.`);
      console.error(x);
      throw x;
    }
  }

  function main(){
    require('./inherit')('tmp', fs.writeFileSync, 'template.package.json');
  }

  beforeEach(() => {
    time('copy example-app -> tmp', () => {
      fs.mkdirSync('./tmp');
      require('fs-extra').copySync('example-app', './tmp');
    });
  });

  afterEach((done) => {
    const startTime = new Date();
    const doneFn = () => { 
      time('rm -rf tmp', () => {}, startTime);
      done();
    }
    cleanupTmp ? require('rimraf')('./tmp', doneFn) : doneFn();
  });

  it('does nothing if module doesn\'t specify parent', () => {
    const noParentName = 'child-no-parent';
    expect(readPackage(noParentName)).toBe(undefined);
    const template = readTemplate('child-no-parent');
    time('main', main);
    expect(readTemplate(noParentName)).toEqual(template);
    expect(readPackage(noParentName)).toBe(undefined);
  });

  it('copies inserts attributes from parent in child module\'s children', () => {
    const exampleAppJson = fs.readFileSync(`./tmp/package.json`, { encoding: 'utf8' });
    const exampleAppDevDependencies = JSON.parse(exampleAppJson).devDependencies;
    exampleAppDevDependencies.gulp = "^3.9.1";
    expect(readPackage('child-leaf')).toBe(undefined);
    time('main', main);
    expect(JSON.parse(readPackage('child-leaf')).devDependencies).toEqual(
      exampleAppDevDependencies
    );
  });

  it('copies attributes from parent to child module', () => {
    expect(readPackage('child-siblings')).toBe(undefined);
    expect(readPackage('child-leaf')).toBe(undefined);
    expect(JSON.parse(readTemplate('child-leaf')).version).toBe(undefined);
    time('main', main);
    const siblingsJson = readPackage('child-siblings');
    const siblingsVersion = JSON.parse(siblingsJson).version;
    expect(JSON.parse(readPackage('child-leaf')).version).toEqual(siblingsVersion);
  });

  it('allows children to override properties', () => {
    const exampleAppJson = fs.readFileSync(`./tmp/package.json`, { encoding: 'utf8' });
    const exampleAppVersion = JSON.parse(exampleAppJson).version;
    expect(exampleAppVersion).toEqual("0.0.0");
    expect(readPackage('child-root')).toBe(undefined);
    time('main', main);
    expect(JSON.parse(readPackage('child-root')).version).toEqual("0.1.3");
  });

  it('allows children to override object property', () => {
    const exampleAppJson = fs.readFileSync(`./tmp/package.json`, { encoding: 'utf8' });
    const exampleAppDevDependencies = JSON.parse(exampleAppJson).devDependencies;
    expect(exampleAppDevDependencies).toEqual({jasmine: "~3.1.0"});
    expect(readPackage('child-siblings-twin')).toBe(undefined);
    time('main', main);
    expect(JSON.parse(readPackage('child-siblings-twin')).devDependencies).toEqual({jasmine: "3.0.0"});
  });
});
